// Generated by CoffeeScript 1.9.3
(function() {
  var Engine, sleep,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  sleep = function(ms) {
    var results, start;
    start = new Date().getTime();
    results = [];
    while (new Date().getTime() - start < ms) {
      continue;
    }
    return results;
  };

  Engine = (function() {
    function Engine() {}

    Engine.prototype.genMove = function() {
      console.log("sleep starting...");
      sleep(3000);
      return [5, 7];
    };

    return Engine;

  })();

  this.Game = (function(superClass) {
    extend(Game, superClass);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.next_starter = "X";

    Game.prototype.wins = {
      X: 0,
      O: 0
    };

    Game.prototype.initialize = function() {
      this.set({
        position: new Position(this.next_starter)
      });
      this.next_starter = this.next_starter === "X" ? "O" : "X";
      console.log(this.next_starter);
      this.set({
        update: true
      });
      this.engine = new Engine;
      this.thinking = false;
      this.set({
        winner: false
      });
      return this.set({
        update: !this.get('update')
      });
    };

    Game.prototype.move = function(x, y, c) {
      var pos, ref;
      pos = this.get('position');
      if (c !== pos.turn) {
        return;
      }
      if (ref = pos.sq[x][y], indexOf.call("OX", ref) >= 0) {
        return;
      }
      if (this.thinking) {
        return;
      }
      if (this.get('winner') !== false) {
        return;
      }
      pos.move2(x, y);
      this.set({
        position: pos
      });
      if (pos.winner_row.length > 0) {
        this.set({
          winner: c
        });
        this.wins.X++;
        this.set({
          update: !this.get('update')
        });
        return;
      }
      if (pos.turn === "O") {
        this.thinking = true;
        pos.make_move();
        this.set({
          position: pos
        });
        this.thinking = false;
        if (pos.winner_row.length > 0) {
          this.set({
            winner: "O"
          });
          this.wins.O++;
        }
        return this.set({
          update: !this.get('update')
        });
      }
    };

    Game.prototype.runEngine = function() {
      var move;
      console.log("running engine...");
      if (this.get('position').turn === "X") {
        return;
      }
      this.thinking = true;
      move = this.engine.genMove();
      this.thinking = false;
      return this.move(move[0], move[1], "O");
    };

    return Game;

  })(Backbone.Model);

  new GameView({
    model: new Game
  });

  Backbone.sync = function(method, model, success, error) {
    return success();
  };

}).call(this);
