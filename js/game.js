// Generated by CoffeeScript 2.2.2
(function() {
  var Engine, sleep,
    indexOf = [].indexOf;

  sleep = function(ms) {
    var results, start;
    start = new Date().getTime();
    results = [];
    while (new Date().getTime() - start < ms) {
      continue;
    }
    return results;
  };

  Engine = class Engine {
    constructor() {}

    genMove() {
      console.log("sleep starting...");
      sleep(3000);
      return [5, 7];
    }

  };

  this.Game = (function() {
    class Game extends Backbone.Model {
      initialize() {
        this.set({
          position: new Position(this.next_starter)
        });
        this.next_starter = this.next_starter === "X" ? "O" : "X";
        console.log(this.next_starter);
        this.set({
          update: true
        });
        this.engine = new Engine;
        this.thinking = false;
        this.set({
          winner: false
        });
        //console.log @get('position')
        return this.set({
          update: !this.get('update')
        });
      }

      //console.log @wins
      move(x, y, c) {
        var pos, ref;
        pos = this.get('position');
        //check illegal moves
        if (c !== pos.turn) {
          return;
        }
        if (ref = pos.sq[x][y], indexOf.call("OX", ref) >= 0) {
          return;
        }
        if (this.thinking) {
          return;
        }
        if (this.get('winner') !== false) {
          return;
        }
        pos.move2(x, y);
        this.set({
          position: pos
        });
        if (pos.winner_row.length > 0) {
          this.set({
            winner: c
          });
          this.wins.X++;
          this.set({
            update: !this.get('update')
          });
          return;
        }
        if (pos.turn === "O") {
          //setTimeout ( => @runEngine() ), 1000
          this.thinking = true;
          pos.make_move();
          this.set({
            position: pos
          });
          this.thinking = false;
          if (pos.winner_row.length > 0) {
            this.set({
              winner: "O"
            });
            this.wins.O++;
          }
          return this.set({
            update: !this.get('update')
          });
        }
      }

      runEngine() {
        var move;
        console.log("running engine...");
        if (this.get('position').turn === "X") {
          return;
        }
        this.thinking = true;
        move = this.engine.genMove();
        this.thinking = false;
        return this.move(move[0], move[1], "O");
      }

    };

    Game.prototype.next_starter = "X";

    Game.prototype.wins = {
      X: 0,
      O: 0
    };

    return Game;

  }).call(this);

  //game = new Game
  //game_view = new GameView({model: game})
  new GameView({
    model: new Game
  });

  Backbone.sync = function(method, model, success, error) {
    return success();
  };

}).call(this);
