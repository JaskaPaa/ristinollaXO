// Generated by CoffeeScript 2.2.2
(function() {
  var arrayEqual, clone;

  this.Position = class Position {
    constructor(turn) {
      var i, j, k, l, ref, ref1;
      this.turn = turn;
      this.w = 20;
      this.h = 20;
      this.last_move = null;
      this.sq = new Array(this.w);
      for (i = k = 0, ref = this.w; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
        this.sq[i] = new Array(this.h);
        for (j = l = 0, ref1 = this.h; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
          this.sq[i][j] = "_";
        }
      }
      if (this.turn === "O") {
        this.move2(9, 8);
      }
      this.winner_row = [];
    }

    move2(x, y) {
      var i, j, k, l, ref, ref1, ref2, ref3, x_low, x_up, y_low, y_up;
      this.sq[x][y] = this.turn;
      this.last_move = [x, y];
      this.check_five(x, y);
      this.turn = this.turn === "X" ? "O" : "X";
      x_low = (x - 2) > 0 ? x - 2 : 0;
      x_up = (x + 2) < 20 ? x + 2 : 19;
      y_low = (y - 2) > 0 ? y - 2 : 0;
      y_up = (y + 2) < 20 ? y + 2 : 19;
      for (i = k = ref = x_low, ref1 = x_up; (ref <= ref1 ? k <= ref1 : k >= ref1); i = ref <= ref1 ? ++k : --k) {
        for (j = l = ref2 = y_low, ref3 = y_up; (ref2 <= ref3 ? l <= ref3 : l >= ref3); j = ref2 <= ref3 ? ++l : --l) {
          if (!(this.sq[i][j] === "O" || this.sq[i][j] === "X")) {
            this.sq[i][j] = '-';
          }
        }
      }
      return true;
    }

    print() {
      var i, j, k, l, len1, len2, ref, results, str;
      ref = this.sq;
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        str = "";
        for (l = 0, len2 = i.length; l < len2; l++) {
          j = i[l];
          if (parseInt(j) < 0) {
            str = str.slice(0, -1);
            str += j + " ";
          } else {
            str += j + " ";
          }
        }
        results.push(console.log(str));
      }
      return results;
    }

  };

  Position.prototype.from_to = function(x, y, step_x, step_y, len) {
    var i, k, ref, str;
    str = "";
    for (i = k = 0, ref = len; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      if ((x >= 0 && x < 20) && (y >= 0 && y < 20)) {
        str += this.sq[x][y];
      }
      x += step_x;
      y += step_y;
    }
    return str;
  };

  Position.prototype.row_value3 = function(str, c) {
    var f, four, i, three, three2;
    four = c + c + c + c;
    three = c + c + c;
    three2 = c + c + '-' + c;
    str = str.replace(/_/g, '-');
    f = c === "O" ? 1 : 0;
    if ((i = str.search(c + c + c + c + c)) !== -1) {
      return 100000 + f * 10000;
    }
    if ((i = str.search(c + c + c + c)) !== -1) {
      if (str[i - 1] === "-" && str[i + 4] === "-") {
        return 10000 + f * 10000;
      }
      if (str[i - 1] === "-" || str[i + 4] === "-") {
        return 900 + f * 500;
      }
      return 0;
    }
    if ((i = str.search(c + c + c + "-" + c + "|" + c + "-" + c + c + c)) !== -1) {
      return 800 + f * 500;
    }
    if ((i = str.search(c + c + c)) !== -1) {
      if (str.slice(i - 2, i) === "--" && str.slice(i + 3, i + 5) === "--") {
        return 1000 + f * 1000;
      }
      if (str.slice(i - 2, i) === "--" || str.slice(i + 3, i + 5) === "--") {
        return 300 + f * 100;
      }
      return 0;
    }
    if ((i = str.search(c + c + '-' + c)) !== -1 || (i = str.search(c + '-' + c + c)) !== -1) {
      if (str.slice(i - 2, i) === "--" && str.slice(i + 4, i + 6) === "--") {
        return 800 + f * 100;
      }
      if (str.slice(i - 2, i) === "--" || str.slice(i + 4, i + 6) === "--") {
        return 500 + f * 100;
      }
      return 0;
    }
    if ((i = str.search('--' + c + c + '--')) !== -1) {
      return 100 + f * 100;
    }
    return 0;
  };

  Position.prototype.square_value = function(x, y) {
    var c, k, len1, ref, str, total;
    //left = if x - 5 < 0 then 0 else x - 5
    //top = if y - 5 < 0 then 0 else y - 5
    //right = if x + 5 >= 20 then 19 else x + 5
    total = 0;
    ref = ["X", "O"];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      c = ref[k];
      this.sq[x][y] = c;
      str = this.from_to(x, y - 5, 0, +1, 11); //vertical
      total += this.row_value3(str, c);
      str = this.from_to(x - 5, y, +1, 0, 11); //horizontal
      total += this.row_value3(str, c);
      str = this.from_to(x - 5, y - 5, +1, +1, 11); //diagonal
      total += this.row_value3(str, c);
      str = this.from_to(x + 5, y - 5, -1, +1, 11); //diagonal
      total += this.row_value3(str, c);
    }
    //console.log total
    this.sq[x][y] = "-"; // undo move
    return total;
  };

  Position.prototype.check_five = function(x, y) {
    var c, i, str, xs, ys;
    c = this.turn;
    xs = x - 5;
    if (xs < 0) {
      xs = 0;
    }
    ys = y - 5;
    if (ys < 0) {
      ys = 0;
    }
    str = this.from_to(x, y - 5, 0, +1, 11); //vertical
    if ((i = str.search(c + c + c + c + c)) !== -1) {
      this.winner_row = [x, ys + i, x, ys + i + 4];
    }
    str = this.from_to(x - 5, y, +1, 0, 11); //horizontal
    if ((i = str.search(c + c + c + c + c)) !== -1) {
      this.winner_row = [xs + i, y, xs + i + 4, y];
    }
    if ((x - 5) <= 0 || (y - 5) <= 0) {
      xs = x > y ? x - y : 0;
      ys = y > x ? y - x : 0;
    }
    //console.log "xs: " + xs + "ys: " + ys
    str = this.from_to(x - 5, y - 5, +1, +1, 11); //diagonal
    if ((i = str.search(c + c + c + c + c)) !== -1) {
      this.winner_row = [xs + i, ys + i, xs + i + 4, ys + i + 4];
    }
    xs = x + 5;
    ys = y - 5 < 0 ? 0 : y - 5;
    if ((x + 5) >= 19 || (y - 5) <= 0) {
      xs = (19 - x) > y ? x + y : 19;
      ys = y > (19 - x) ? y - (19 - x) : 0;
    }
    //console.log "xs: " + xs + "ys: " + ys
    str = this.from_to(x + 5, y - 5, -1, +1, 11); //diagonal
    if ((i = str.search(c + c + c + c + c)) !== -1) {
      this.winner_row = [xs - i, ys + i, xs - i - 4, ys + i + 4];
    }
    return false;
  };

  Position.prototype.make_move = function() {
    var i, j, k, l, moves, ref, ref1;
    console.log(this.negamax(0, this) + " ============");
    moves = [];
    for (i = k = 0, ref = this.w; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.h; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        if (this.sq[i][j] === '-') {
          moves.push({
            value: this.square_value(i, j),
            move: [i, j]
          });
        }
      }
    }
    // sort bests (max values) to be first
    moves.sort(function(a, b) {
      return b.value - a.value;
    });
    //console.log max + " " + best_move
    console.log(moves);
    return this.move2(moves[0].move[0], moves[0].move[1]);
  };

  Position.prototype.position_value = function() {
    var i, j, k, l, moves, ref, ref1;
    moves = [];
    for (i = k = 0, ref = this.w; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.h; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        if (this.sq[i][j] === '-') {
          moves.push({
            value: this.square_value(i, j),
            move: [i, j]
          });
        }
      }
    }
    // sort bests (max values) to be first
    moves.sort(function(a, b) {
      return b.value - a.value;
    });
    //console.log max + " " + best_move
    return moves[0].value;
  };

  Position.prototype.negamaxW = function(depth) {
    var bestVal, f, i, j, k, l, newPos, ref, ref1, val;
    f = this.turn === "O" ? 1 : -1;
    if (depth === 0 || this.check_five(this.last_move[0], this.last_move[1])) {
      return f * this.position_value();
    }
    newPos = clone(this); // $.extend(true, {}, this)
    bestVal = -10000000;
    for (i = k = 0, ref = this.w; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.h; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        if (this.sq[i][j] === '-') {
          newPos.move2(i, j);
          val = -newPos.negamax(depth - 1);
          bestVal = Math.max(val, bestVal);
        }
      }
    }
    //console.log val
    return bestVal;
  };

  Position.prototype.negamax = function(depth, pos) {
    var bestVal, f, i, j, k, l, newPos, ref, ref1, val;
    f = this.turn === "O" ? 1 : -1;
    if (depth === 0 || this.check_five(this.last_move[0], this.last_move[1])) {
      return f * this.position_value();
    }
    bestVal = -10000000;
    for (i = k = 0, ref = this.w; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.h; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        if (this.sq[i][j] === '-') {
          newPos = clone(this);
          newPos.move2(i, j);
          val = -newPos.negamax(depth - 1, newPos);
          bestVal = Math.max(val, bestVal);
        }
      }
    }
    //console.log val
    return bestVal;
  };

  arrayEqual = function(a, b) {
    return a.length === b.length && a.every(function(elem, i) {
      return elem === b[i];
    });
  };

  clone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

}).call(this);
