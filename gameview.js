// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.GameView = (function(_super) {

    __extends(GameView, _super);

    function GameView() {
      this.canvasClick = __bind(this.canvasClick, this);
      return GameView.__super__.constructor.apply(this, arguments);
    }

    GameView.prototype.el = $('body');

    GameView.prototype.initialize = function() {
      _.bindAll(this);
      this.board = $('#board').get(0);
      this.squareSize = this.board.width / 20;
      this.render();
      return this.listenTo(this.model, "change", this.render);
    };

    GameView.prototype.render = function() {
      $('#talk').text("Sinun vuorosi.");
      $('#talk').prop('disabled', true);
      this.renderGrid('blue');
      this.renderPosition();
      this.talk();
      $('#xscore').text(this.model.wins.X);
      $('#oscore').text(this.model.wins.O);
      return this;
    };

    GameView.prototype.talk = function() {
      var pos;
      pos = this.model.get('position');
      console.log(pos);
      if (pos.last_move === null) {
        $('#talk').text("Sinun vuorosi aloittaa...");
      }
      if (this.model.get('winner') === "O") {
        $('#talk').text("Minä voitin!!!Minä voitin!!!");
      }
      if (this.model.get('winner') === "X") {
        return $('#talk').text("Okei, voitit...");
      }
    };

    GameView.prototype.renderPosition = function() {
      var i, j, pos, _i, _j, _ref, _ref1, _ref2;
      pos = this.model.get('position');
      for (i = _i = 0, _ref = pos.w; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = pos.h; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (pos.sq[i][j] === "O") {
            this.renderO(i, j);
          }
          if (pos.sq[i][j] === "X") {
            this.renderX(i, j);
          }
        }
      }
      if (_ref2 = this.model.get('winner'), __indexOf.call("OX", _ref2) >= 0) {
        this.drawWinnerLine(pos.winner_row);
        $('#new').prop('disabled', false);
      } else {
        $('#new').prop('disabled', true);
      }
      return this;
    };

    GameView.prototype.showLastMove = function(count) {
      var pos, x, y,
        _this = this;
      if (count == null) {
        count = 6;
      }
      if (count === 0) {
        return;
      }
      pos = this.model.get('position');
      if (pos.last_move === null) {
        return;
      }
      x = pos.last_move[0];
      y = pos.last_move[1];
      if (count % 2 === 0) {
        this.clearSquare(x, y);
      } else {
        if (pos.sq[x][y] === "O") {
          this.renderO(x, y);
        }
        if (pos.sq[x][y] === "X") {
          this.renderX(x, y);
        }
      }
      this.drawWinnerLine(pos.winner_row);
      setTimeout((function() {
        return _this.showLastMove(count - 1);
      }), 200);
      return null;
    };

    GameView.prototype.drawWinnerLine = function(arr) {
      var context, s;
      if ((!(arr != null)) || arr.length !== 4) {
        return;
      }
      context = this.board.getContext('2d');
      context.beginPath();
      context.lineWidth = 5;
      s = this.squareSize;
      context.moveTo(arr[0] * s + s / 2, arr[1] * s + s / 2);
      context.lineTo(arr[2] * s + s / 2, arr[3] * s + s / 2);
      context.closePath();
      context.stroke();
    };

    GameView.prototype.renderX = function(x, y) {
      var context, z;
      x = x * this.squareSize + this.squareSize / 2;
      y = y * this.squareSize + this.squareSize / 2;
      z = Math.floor(this.squareSize / 3);
      context = this.board.getContext('2d');
      context.beginPath();
      context.lineWidth = 2;
      context.moveTo(x - z, y - z);
      context.lineTo(x + z, y + z);
      context.moveTo(x - z, y + z);
      context.lineTo(x + z, y - z);
      context.closePath();
      context.stroke();
    };

    GameView.prototype.renderO = function(x, y) {
      var context, z;
      context = this.board.getContext('2d');
      x = x * this.squareSize + this.squareSize / 2;
      y = y * this.squareSize + this.squareSize / 2;
      z = Math.floor(this.squareSize / 3);
      context.beginPath();
      context.arc(x, y, z, 0, 2 * Math.PI, false);
      context.lineWidth = 1.9;
      context.stroke();
      return context.closePath();
    };

    GameView.prototype.canvasClick = function(e) {
      var x, y;
      x = Math.floor((e.pageX - $("#board").offset().left) / this.squareSize);
      y = Math.floor((e.pageY - $("#board").offset().top) / this.squareSize);
      if (this.model.get('position').turn === "O") {
        return;
      }
      return this.model.move(x, y, "X");
    };

    GameView.prototype.newClick = function(e) {
      this.model.initialize();
      return $('#new').prop('disabled', true);
    };

    GameView.prototype.lastClick = function(e) {
      return this.showLastMove(6);
    };

    GameView.prototype.events = {
      'click #board': 'canvasClick',
      'click #new': 'newClick',
      'click #last': 'lastClick'
    };

    return GameView;

  })(Backbone.View);

  GameView.prototype.clearSquare = function(x, y) {
    var context;
    context = this.board.getContext('2d');
    context.save();
    x = x * this.squareSize + 2;
    y = y * this.squareSize + 2;
    context.clearRect(x, y, this.squareSize - 4, this.squareSize - 4);
    return context.restore();
  };

  GameView.prototype.renderGrid = function(color) {
    var context, i, j;
    context = this.board.getContext('2d');
    context.save();
    context.lineWidth = 0.5;
    context.strokeStyle = color;
    context.clearRect(0, 0, this.board.width, this.board.height);
    i = 0;
    while (i <= this.board.height) {
      context.beginPath();
      context.moveTo(0, i);
      context.lineTo(this.board.width, i);
      context.closePath();
      context.stroke();
      i = i + this.squareSize;
    }
    j = 0;
    while (j <= this.board.width) {
      context.beginPath();
      context.moveTo(j, 0);
      context.lineTo(j, this.board.height);
      context.closePath();
      context.stroke();
      j = j + this.squareSize;
    }
    context.restore();
  };

}).call(this);
