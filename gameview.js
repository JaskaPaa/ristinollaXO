// Generated by CoffeeScript 2.2.2
(function() {
  var ref,
    indexOf = [].indexOf,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = this.GameView = (function() {
    class GameView extends Backbone.View {
      constructor() {
        super(...arguments);
        this.canvasClick = this.canvasClick.bind(this);
      }

      initialize() {
        _.bindAll(this);
        this.board = 0; //$('#board').get(0)
        this.squareSize = 0; //@board.width / 20
        this.updateSize3();
        //@render()
        this.listenTo(this.model, "change", this.render);
        return $(window).on("resize", () => {
          return this.updateSize3();
        });
      }

      updateSize2() {
        var fs, maxSize, minSize, size;
        console.log("Update... " + $("board").width());
        console.log("Update... " + $(window).height());
        console.log("Update board.width: " + $("#board").width());
        console.log("Update window.width: " + $(window).width());
        console.log("Update window.height: " + $(window).height());
        minSize = 20 * 15;
        maxSize = 20 * 35;
        size = $(window).width() / 2 - ($(window).width() / 2) % 20;
        if (size < minSize) {
          size = minSize;
        }
        if (size > maxSize) {
          size = maxSize;
        }
        $('#board').attr("width", size);
        $('#board').attr("height", size);
        this.board = $('#board').get(0);
        this.squareSize = this.board.width / 20;
        if ($(window).width() < $(window).height()) {
          fs = $("#gamestatus").detach();
          fs.appendTo("#state2");
        } else {
          fs = $("#gamestatus").detach();
          fs.appendTo("#state");
        }
        console.log("After update... " + this.board.width);
        return this.render();
      }

      updateSize3() {
        var fs, maxSize, size, winH, winWidth;
        maxSize = 20 * 35;
        winWidth = $(window).width();
        if ($(window).width() < $(window).height()) {
          winWidth -= Math.floor(winWidth * 0.04);
          size = winWidth - winWidth % 20; // size
          fs = $("#gamestatus").detach();
          fs.appendTo("#state2");
        } else {
          size = $(window).width() / 2 - ($(window).width() / 2) % 20;
          if (size > maxSize) {
            size = maxSize;
          }
          if ($(window).height() < size) {
            winH = $(window).height() - Math.floor($(window).height() * 0.04);
            size = winH - winH % 20; // size
          }
          fs = $("#gamestatus").detach();
          fs.appendTo("#state");
        }
        $('#board').attr("width", size);
        $('#board').attr("height", size);
        this.board = $('#board').get(0);
        this.squareSize = this.board.width / 20;
        return this.render();
      }

      updateSize() {
        var size;
        console.log("Update... " + $(".main").width());
        console.log("Update width: " + $(window).width());
        console.log("Update height: " + $(window).height());
        size = $(".main").width() - $(".main").width() % 20;
        $('#board').attr("width", size);
        $('#board').attr("height", size);
        this.board = $('#board').get(0);
        this.squareSize = this.board.width / 20;
        console.log("After update... " + this.board.width);
        return this.render();
      }

      render() {
        $('#talk').text("Sinun vuorosi.");
        $('#talk').prop('disabled', true);
        this.renderGrid('blue');
        this.renderPosition();
        //@model.runEngine()
        this.talk();
        $('#xscore').text(this.model.wins.X);
        $('#oscore').text(this.model.wins.O);
        return this;
      }

      talk() {
        var pos;
        pos = this.model.get('position');
        console.log(pos);
        if (pos.last_move === null) {
          $('#talk').text("Sinun vuorosi aloittaa...");
        }
        if (this.model.get('winner') === "O") {
          $('#talk').text("Minä voitin!!!Minä voitin!!!");
        }
        if (this.model.get('winner') === "X") {
          return $('#talk').text("Okei, voitit...");
        }
      }

      renderPosition() {
        var i, j, k, l, pos, ref1, ref2, ref3;
        pos = this.model.get('position');
        for (i = k = 0, ref1 = pos.w; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {
          for (j = l = 0, ref2 = pos.h; (0 <= ref2 ? l < ref2 : l > ref2); j = 0 <= ref2 ? ++l : --l) {
            if (pos.sq[i][j] === "O") {
              this.renderO(i, j);
            }
            if (pos.sq[i][j] === "X") {
              this.renderX(i, j);
            }
          }
        }
        //@showLastMove(4)
        //console.log pos.last_move
        if (ref3 = this.model.get('winner'), indexOf.call("OX", ref3) >= 0) {
          //console.log @model.get('winner')
          //console.log pos.winner_row
          this.drawWinnerLine(pos.winner_row);
          $('#new').prop('disabled', false);
        } else {
          $('#new').prop('disabled', true);
        }
        return this;
      }

      showLastMove(count = 6) {
        var pos, x, y;
        if (count === 0) {
          return;
        }
        pos = this.model.get('position');
        if (pos.last_move === null) {
          return;
        }
        x = pos.last_move[0];
        y = pos.last_move[1];
        if (count % 2 === 0) {
          this.clearSquare(x, y);
        } else {
          if (pos.sq[x][y] === "O") {
            this.renderO(x, y);
          }
          if (pos.sq[x][y] === "X") {
            this.renderX(x, y);
          }
        }
        this.drawWinnerLine(pos.winner_row); // if any
        setTimeout((() => {
          return this.showLastMove(count - 1);
        }), 200);
        return null;
      }

      drawWinnerLine(arr) {
        var context, s;
        //console.log "drawing line..."
        if ((arr == null) || arr.length !== 4) {
          return;
        }
        context = this.board.getContext('2d');
        context.beginPath();
        context.lineWidth = 5;
        s = this.squareSize;
        context.moveTo(arr[0] * s + s / 2, arr[1] * s + s / 2);
        context.lineTo(arr[2] * s + s / 2, arr[3] * s + s / 2);
        context.closePath();
        context.stroke();
      }

      renderX(x, y) {
        var context, z;
        x = x * this.squareSize + this.squareSize / 2;
        y = y * this.squareSize + this.squareSize / 2;
        z = Math.floor(this.squareSize / 3);
        context = this.board.getContext('2d');
        context.beginPath();
        context.lineWidth = this.squareSize / 30.0 + 0.9;
        context.moveTo(x - z, y - z);
        context.lineTo(x + z, y + z);
        context.moveTo(x - z, y + z);
        context.lineTo(x + z, y - z);
        context.closePath();
        context.stroke();
      }

      renderO(x, y) {
        var context, z;
        context = this.board.getContext('2d');
        //context.clearRect(0, 0, @board.width, @board.height)
        //@renderGrid "blue"
        x = x * this.squareSize + this.squareSize / 2;
        y = y * this.squareSize + this.squareSize / 2;
        z = Math.floor(this.squareSize / 3);
        context.beginPath();
        context.arc(x, y, z, 0, 2 * Math.PI, false);
        context.lineWidth = this.squareSize / 30.0 + 0.9;
        //context.strokeStyle = '#003300'
        context.stroke();
        return context.closePath();
      }

      canvasClick(e) {
        var x, y;
        boundMethodCheck(this, ref);
        x = Math.floor((e.pageX - $("#board").offset().left) / this.squareSize);
        y = Math.floor((e.pageY - $("#board").offset().top) / this.squareSize);
        if (this.model.get('position').turn === "O") {
          return;
        }
        return this.model.move(x, y, "X");
      }

      //@undelegateEvents()
      //@delegateEvents()
      //console.log "klick"
      newClick(e) {
        this.model.initialize();
        return $('#new').prop('disabled', true);
      }

      lastClick(e) {
        return this.showLastMove(6);
      }

    };

    GameView.prototype.el = $('body');

    GameView.prototype.events = {
      'click #board': 'canvasClick',
      'click #new': 'newClick',
      'click #last': 'lastClick'
    };

    return GameView;

  }).call(this);

  GameView.prototype.clearSquare = function(x, y) {
    var context;
    context = this.board.getContext('2d');
    context.save();
    x = x * this.squareSize + 2;
    y = y * this.squareSize + 2;
    context.clearRect(x, y, this.squareSize - 4, this.squareSize - 4);
    return context.restore();
  };

  GameView.prototype.renderGrid = function(color) {
    var context, i, j;
    console.log("Render grip... " + this.board.width);
    context = this.board.getContext('2d');
    context.save();
    context.lineWidth = this.squareSize / 30.0;
    context.strokeStyle = color;
    context.clearRect(0, 0, this.board.width, this.board.height);
    // horizontal grid lines
    i = 0;
    while (i <= this.board.height) {
      context.beginPath();
      context.moveTo(0, i);
      context.lineTo(this.board.width, i);
      context.closePath();
      context.stroke();
      i = i + this.squareSize;
    }
    // vertical grid lines
    j = 0;
    while (j <= this.board.width) {
      context.beginPath();
      context.moveTo(j, 0);
      context.lineTo(j, this.board.height);
      context.closePath();
      context.stroke();
      j = j + this.squareSize;
    }
    context.restore();
  };

}).call(this);
